/* The following code was generated by JFlex 1.7.0 */

/* codigo de usuario */
package Analizadores;

import java_cup.runtime.*;
import java.util.Date;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/jcsr/Desktop/jflex.flex</tt>
 */
public class AnalizadorLexico1 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CORCHETE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\1\0\1\65"+
    "\1\57\1\56\10\0\1\54\1\0\1\64\12\53\1\0\1\0\1\62"+
    "\1\66\1\63\2\0\1\3\1\5\1\7\1\11\1\13\1\14\1\15"+
    "\1\16\1\20\1\21\1\10\1\23\1\25\1\27\1\31\1\33\1\35"+
    "\1\37\1\41\1\43\1\45\1\47\1\50\1\51\1\10\1\52\1\60"+
    "\1\0\1\61\1\0\1\55\1\0\1\2\1\4\1\6\1\10\1\12"+
    "\1\10\1\10\1\10\1\17\1\10\1\10\1\22\1\24\1\26\1\30"+
    "\1\32\1\34\1\36\1\40\1\42\1\44\1\46\1\10\1\10\1\10"+
    "\1\10\1\0\1\67\124\0\1\0\37\0\1\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff1e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\21\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\14\1\1\12\1\13\12\0\1\14"+
    "\15\0\1\15\6\0\1\15\2\0\1\16\75\0\1\17"+
    "\11\0\1\20\1\0\1\21\1\22\10\0\1\23\1\0"+
    "\1\24\1\25\2\0\1\26\7\0\1\27\1\0\1\30"+
    "\3\0\1\31\4\0\1\32\2\0\1\33\1\0\1\34"+
    "\1\35\3\0\1\36\2\0\1\37\17\0\1\40\1\41"+
    "\3\0\1\42\1\0\1\43\1\44\5\0\1\45\12\0"+
    "\1\46\5\0\1\47\5\0\1\50\2\0\1\51\3\0"+
    "\1\52\10\0\1\53\2\0\1\54\1\55\24\0\1\56"+
    "\5\0\1\57\13\0\1\60\14\0\1\61\4\0\1\62"+
    "\2\0\1\63\1\64\2\0\1\65\3\0\1\66\1\67"+
    "\4\0\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\160\0\250\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\160\0\160"+
    "\0\160\0\160\0\160\0\160\0\u0498\0\u04d0\0\u0508\0\u0540"+
    "\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700"+
    "\0\160\0\160\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\160\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\160\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\u0b28\0\u0d90\0\u0dc8\0\u0700\0\u0e00\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0"+
    "\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0"+
    "\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0"+
    "\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0"+
    "\0\u1ae8\0\u1b20\0\160\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38"+
    "\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\160\0\u1d50\0\160\0\160"+
    "\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10"+
    "\0\160\0\u1f48\0\160\0\160\0\u1f80\0\u1fb8\0\160\0\u1ff0"+
    "\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\160\0\u2178"+
    "\0\u21b0\0\u21e8\0\u2220\0\u2258\0\160\0\u2290\0\u22c8\0\u2300"+
    "\0\u2338\0\160\0\u2370\0\u23a8\0\160\0\u23e0\0\160\0\160"+
    "\0\u2418\0\u2450\0\u2488\0\160\0\u24c0\0\u24f8\0\u2530\0\u2568"+
    "\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728"+
    "\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\160\0\160"+
    "\0\u28b0\0\u28e8\0\u05e8\0\160\0\u2920\0\160\0\u2958\0\u2990"+
    "\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50"+
    "\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\160"+
    "\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\160\0\u2e28\0\u2e60"+
    "\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\160\0\u2fe8"+
    "\0\u3020\0\u3058\0\160\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170"+
    "\0\u31a8\0\u31e0\0\u3218\0\160\0\u3250\0\u3288\0\160\0\160"+
    "\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448"+
    "\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608"+
    "\0\u3640\0\u3678\0\u36b0\0\u36e8\0\160\0\u3720\0\u3758\0\u3790"+
    "\0\u37c8\0\u3800\0\160\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918"+
    "\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\160\0\u3aa0"+
    "\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60"+
    "\0\u3c98\0\u3cd0\0\u3d08\0\160\0\u3d40\0\u3d78\0\u3db0\0\u3de8"+
    "\0\160\0\u3e20\0\u3e58\0\160\0\160\0\u3e90\0\u3ec8\0\160"+
    "\0\u3f00\0\u3f38\0\u3f70\0\160\0\160\0\u3fa8\0\u3fe0\0\u4018"+
    "\0\u4050\0\160\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\3\1\10"+
    "\2\3\2\11\1\12\3\3\1\13\4\3\1\14\1\15"+
    "\1\16\1\3\1\17\1\20\1\21\5\3\1\22\1\3"+
    "\1\23\1\3\1\24\2\25\4\3\3\26\1\3\1\27"+
    "\1\3\1\30\1\31\1\32\1\33\1\34\1\4\1\3"+
    "\1\4\5\3\1\35\1\3\1\36\4\3\1\37\1\3"+
    "\1\40\1\41\3\3\1\42\1\3\1\43\3\3\1\44"+
    "\7\3\1\45\3\3\1\46\3\3\1\47\3\26\1\50"+
    "\1\3\1\51\5\3\1\52\76\0\2\53\32\0\2\54"+
    "\32\0\2\53\5\0\1\55\5\0\1\56\3\0\1\57"+
    "\12\0\2\54\55\0\1\60\61\0\1\61\5\0\1\62"+
    "\100\0\2\63\37\0\1\64\65\0\1\65\107\0\1\66"+
    "\66\0\2\67\66\0\2\67\13\0\1\70\61\0\1\71"+
    "\32\0\2\72\66\0\1\72\1\73\104\0\1\74\62\0"+
    "\1\75\4\0\1\76\110\0\1\77\30\0\2\100\66\0"+
    "\55\26\24\0\1\101\67\0\1\102\54\0\3\103\1\0"+
    "\3\103\1\0\1\103\1\0\1\103\1\0\2\103\1\0"+
    "\12\103\1\0\5\103\1\0\3\103\1\0\11\103\1\0"+
    "\12\103\25\0\1\104\24\0\1\105\62\0\1\106\35\0"+
    "\1\107\121\0\1\110\22\0\3\103\1\111\3\103\1\0"+
    "\1\103\1\0\1\103\1\0\2\103\1\0\12\103\1\0"+
    "\5\103\1\0\3\103\1\0\11\103\1\0\15\103\1\0"+
    "\3\103\1\0\1\103\1\0\1\103\1\0\2\103\1\0"+
    "\1\103\1\112\10\103\1\0\5\103\1\0\3\103\1\0"+
    "\11\103\1\0\12\103\20\0\1\113\122\0\1\114\17\0"+
    "\1\115\1\0\1\115\1\0\1\115\1\0\1\115\1\0"+
    "\2\115\36\0\1\115\22\0\2\116\116\0\2\117\67\0"+
    "\1\120\50\0\1\121\22\0\1\122\33\0\1\123\117\0"+
    "\1\124\33\0\1\125\107\0\1\126\63\0\2\127\56\0"+
    "\1\130\71\0\1\131\102\0\2\132\55\0\1\133\74\0"+
    "\1\134\105\0\2\135\41\0\1\136\3\0\1\137\20\0"+
    "\2\135\73\0\1\140\75\0\1\141\61\0\1\142\71\0"+
    "\1\143\44\0\2\144\73\0\1\145\77\0\1\146\33\0"+
    "\1\147\121\0\1\150\73\0\1\151\55\0\1\152\65\0"+
    "\1\153\101\0\1\154\41\0\1\155\131\0\1\156\33\0"+
    "\2\157\66\0\2\160\62\0\1\161\103\0\1\162\105\0"+
    "\1\163\40\0\1\164\110\0\1\165\71\0\1\166\57\0"+
    "\1\167\72\0\2\170\50\0\1\171\71\0\1\172\53\0"+
    "\2\173\131\0\1\174\35\0\1\175\54\0\2\176\123\0"+
    "\1\177\50\0\1\200\67\0\1\201\112\0\1\202\71\0"+
    "\1\203\25\0\1\204\114\0\2\205\101\0\1\206\37\0"+
    "\1\207\71\0\1\210\117\0\1\211\65\0\1\212\71\0"+
    "\1\213\35\0\1\214\113\0\1\215\43\0\1\216\127\0"+
    "\1\217\44\0\2\220\42\0\2\221\77\0\1\222\65\0"+
    "\1\223\113\0\1\224\61\0\1\225\41\0\1\226\77\0"+
    "\1\227\113\0\1\230\74\0\2\231\25\0\1\232\100\0"+
    "\1\233\111\0\2\234\33\0\1\235\25\0\1\236\51\0"+
    "\1\237\100\0\2\240\55\0\1\241\103\0\1\242\71\0"+
    "\1\243\67\0\1\244\61\0\1\245\103\0\1\246\66\0"+
    "\2\247\67\0\1\250\37\0\1\251\73\0\1\252\74\0"+
    "\1\253\67\0\1\254\106\0\1\255\33\0\1\256\115\0"+
    "\1\257\112\0\1\260\41\0\2\261\104\0\2\262\25\0"+
    "\1\263\67\0\1\264\67\0\1\265\123\0\1\266\42\0"+
    "\2\267\131\0\1\270\32\0\1\271\61\0\2\272\131\0"+
    "\1\273\67\0\1\274\41\0\1\275\52\0\2\276\57\0"+
    "\1\277\115\0\1\300\56\0\1\301\52\0\1\302\102\0"+
    "\1\303\100\0\1\304\53\0\1\305\70\0\1\306\104\0"+
    "\1\307\52\0\1\310\126\0\1\311\26\0\2\312\116\0"+
    "\2\313\63\0\1\314\37\0\1\315\135\0\1\316\54\0"+
    "\2\317\33\0\1\320\15\0\1\321\51\0\1\322\113\0"+
    "\1\323\75\0\1\324\70\0\2\325\55\0\1\326\75\0"+
    "\1\327\33\0\1\330\123\0\1\331\50\0\1\332\76\0"+
    "\1\333\71\0\1\334\111\0\1\335\54\0\2\336\56\0"+
    "\2\337\113\0\1\340\32\0\1\341\56\0\1\342\23\0"+
    "\1\343\5\0\1\344\30\0\2\345\123\0\1\346\61\0"+
    "\1\347\41\0\1\350\67\0\1\351\104\0\1\352\105\0"+
    "\2\353\105\0\1\354\23\0\1\355\65\0\1\356\134\0"+
    "\1\357\53\0\2\360\35\0\1\361\111\0\1\362\67\0"+
    "\1\363\41\0\1\364\104\0\1\365\107\0\2\366\41\0"+
    "\1\367\65\0\1\370\115\0\1\371\45\0\1\372\115\0"+
    "\1\373\54\0\2\374\45\0\1\375\15\0\1\376\45\0"+
    "\1\377\67\0\1\u0100\137\0\1\u0101\45\0\1\u0102\65\0"+
    "\1\u0103\65\0\1\u0104\57\0\1\u0105\115\0\1\u0106\27\0"+
    "\1\u0107\104\0\1\u0108\124\0\1\u0109\32\0\1\u010a\67\0"+
    "\1\u010b\107\0\2\u010c\65\0\1\u010d\61\0\1\u010e\75\0"+
    "\1\u010f\103\0\1\u0110\41\0\1\u0111\75\0\1\u0112\54\0"+
    "\1\u0113\67\0\1\u0114\56\0\1\u0115\74\0\1\u0116\62\0"+
    "\1\u0117\23\0\1\u0118\63\0\1\u0119\71\0\1\u011a\51\0"+
    "\1\u011b\65\0\1\u011c\111\0\1\u011d\65\0\1\u011e\65\0"+
    "\1\u011f\71\0\1\u0120\56\0\1\u0121\67\0\1\u0122\100\0"+
    "\1\u0123\41\0\1\u0124\67\0\1\u0125\141\0\1\u0126\15\0"+
    "\1\u0127\104\0\1\u0128\100\0\1\u0129\65\0\1\u012a\43\0"+
    "\1\u012b\141\0\1\u012c\43\0\1\u012d\45\0\1\u012e\105\0"+
    "\1\u012f\57\0\1\u0130\122\0\1\u0131\26\0\1\u0132\74\0"+
    "\1\u0133\102\0\1\u0134\53\0\1\u0135\124\0\1\u0136\46\0"+
    "\1\u0137\43\0\1\u0138\117\0\1\u0139\54\0\1\u013a\62\0"+
    "\1\u013b\74\0\1\u013c\67\0\1\u013d\62\0\1\u013e\103\0"+
    "\1\u013f\53\0\1\u0140\63\0\1\u0141\111\0\1\u0142\65\0"+
    "\1\u0143\45\0\1\u0144\113\0\1\u0145\45\0\1\u0146\107\0"+
    "\1\u0147\103\0\1\u0148\31\0\1\u0149\102\0\1\u014a\76\0"+
    "\1\u014b\43\0\1\u014c\113\0\1\u014d\43\0\1\u014e\127\0"+
    "\1\u014f\37\0\1\u0150\105\0\1\u0151\51\0\1\u0152\63\0"+
    "\1\u0153\73\0\1\u0154\103\0\1\u0155\67\0\1\u0156\60\0"+
    "\1\u0157\112\0\1\u0158\55\0\1\u0159\51\0\1\u015a\103\0"+
    "\1\u015b\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\22\1\6\11\14\1\2\11\12\0\1\11"+
    "\15\0\1\11\6\0\1\1\2\0\1\1\75\0\1\11"+
    "\11\0\1\11\1\0\2\11\10\0\1\11\1\0\2\11"+
    "\2\0\1\11\7\0\1\11\1\0\1\1\3\0\1\11"+
    "\4\0\1\11\2\0\1\11\1\0\2\11\3\0\1\11"+
    "\2\0\1\1\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\1\1\5\0\1\1\12\0\1\11\5\0\1\11\5\0"+
    "\1\1\2\0\1\11\3\0\1\11\10\0\1\11\2\0"+
    "\2\11\24\0\1\11\5\0\1\11\13\0\1\11\14\0"+
    "\1\11\4\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico1(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("Simbolo invalido {"+ yytext()+"}");
            } 
            // fall through
          case 58: break;
          case 2: 
            { /* IGNORAR */
            } 
            // fall through
          case 59: break;
          case 3: 
            { return symbol(sym.IDD,yytext());
            } 
            // fall through
          case 60: break;
          case 4: 
            { yybegin(CORCHETE);return symbol(sym.CORCHETE_ABIERTO);
            } 
            // fall through
          case 61: break;
          case 5: 
            { return symbol(sym.ANGULAR_ABIERTO);
            } 
            // fall through
          case 62: break;
          case 6: 
            { return symbol(sym.ANGULAR_CERRADO);
            } 
            // fall through
          case 63: break;
          case 7: 
            { return symbol(sym.DIAGONAL);
            } 
            // fall through
          case 64: break;
          case 8: 
            { return symbol(sym.COMILLA);
            } 
            // fall through
          case 65: break;
          case 9: 
            { return symbol(sym.IGUAL);
            } 
            // fall through
          case 66: break;
          case 10: 
            { yybegin(YYINITIAL);return symbol(sym.CORCHETE_CERRADO);
            } 
            // fall through
          case 67: break;
          case 11: 
            { return symbol(sym.PIPE);
            } 
            // fall through
          case 68: break;
          case 12: 
            { return symbol(sym.ID);
            } 
            // fall through
          case 69: break;
          case 13: 
            { return symbol(sym.URL,yytext());
            } 
            // fall through
          case 70: break;
          case 14: 
            { return symbol(sym.HEXADECIMAL,yytext());
            } 
            // fall through
          case 71: break;
          case 15: 
            { return symbol(sym.MENU);
            } 
            // fall through
          case 72: break;
          case 16: 
            { return symbol(sym.ANCHO);
            } 
            // fall through
          case 73: break;
          case 17: 
            { return symbol(sym.CLASE);
            } 
            // fall through
          case 74: break;
          case 18: 
            { return symbol(sym.COLOR);
            } 
            // fall through
          case 75: break;
          case 19: 
            { return symbol(sym.PADRE);
            } 
            // fall through
          case 76: break;
          case 20: 
            { return symbol(sym.SITIO);
            } 
            // fall through
          case 77: break;
          case 21: 
            { return symbol(sym.TEXTO);
            } 
            // fall through
          case 78: break;
          case 22: 
            { return symbol(sym.VALOR);
            } 
            // fall through
          case 79: break;
          case 23: 
            { return symbol(sym.VIDEO);
            } 
            // fall through
          case 80: break;
          case 24: 
            { return symbol(sym.ACCION);
            } 
            // fall through
          case 81: break;
          case 25: 
            { return symbol(sym.ALTURA);
            } 
            // fall through
          case 82: break;
          case 26: 
            { return symbol(sym.NOMBRE);
            } 
            // fall through
          case 83: break;
          case 27: 
            { return symbol(sym.ORIGEN);
            } 
            // fall through
          case 84: break;
          case 28: 
            { return symbol(sym.PAGINA);
            } 
            // fall through
          case 85: break;
          case 29: 
            { return symbol(sym.TITULO);
            } 
            // fall through
          case 86: break;
          case 30: 
            { return symbol(sym.IMAGEN);
            } 
            // fall through
          case 87: break;
          case 31: 
            { return symbol(sym.NUMEROS,yytext());
            } 
            // fall through
          case 88: break;
          case 32: 
            { return symbol(sym.CENTRAR);
            } 
            // fall through
          case 89: break;
          case 33: 
            { return symbol(sym.DERECHA);
            } 
            // fall through
          case 90: break;
          case 34: 
            { return symbol(sym.PARRAFO);
            } 
            // fall through
          case 91: break;
          case 35: 
            { return symbol(sym.ACCIONES);
            } 
            // fall through
          case 92: break;
          case 36: 
            { return symbol(sym.ATRIBUTO);
            } 
            // fall through
          case 93: break;
          case 37: 
            { return symbol(sym.ETIQUETA);
            } 
            // fall through
          case 94: break;
          case 38: 
            { return symbol(sym.ATRIBUTOS);
            } 
            // fall through
          case 95: break;
          case 39: 
            { return symbol(sym.ETIQUETAS);
            } 
            // fall through
          case 96: break;
          case 40: 
            { return symbol(sym.PARAMETRO);
            } 
            // fall through
          case 97: break;
          case 41: 
            { return symbol(sym.IZQUIERDA);
            } 
            // fall through
          case 98: break;
          case 42: 
            { return symbol(sym.ALINEACION);
            } 
            // fall through
          case 99: break;
          case 43: 
            { return symbol(sym.PARAMETROS);
            } 
            // fall through
          case 100: break;
          case 44: 
            { return symbol(sym.JUSTIFICAR);
            } 
            // fall through
          case 101: break;
          case 45: 
            { return symbol(sym.FECHA,yytext());
            } 
            // fall through
          case 102: break;
          case 46: 
            { return symbol(sym.NUEVA_PAGINA);
            } 
            // fall through
          case 103: break;
          case 47: 
            { return symbol(sym.BORRAR_PAGINA);
            } 
            // fall through
          case 104: break;
          case 48: 
            { return symbol(sym.FECHA_CREACION);
            } 
            // fall through
          case 105: break;
          case 49: 
            { return symbol(sym.NUEVO_SITIO_WEB);
            } 
            // fall through
          case 106: break;
          case 50: 
            { return symbol(sym.BORRAR_SITIO_WEB);
            } 
            // fall through
          case 107: break;
          case 51: 
            { return symbol(sym.MODIFICAR_PAGINA);
            } 
            // fall through
          case 108: break;
          case 52: 
            { return symbol(sym.USUARIO_CREACION);
            } 
            // fall through
          case 109: break;
          case 53: 
            { return symbol(sym.BORRAR_COMPONENTE);
            } 
            // fall through
          case 110: break;
          case 54: 
            { return symbol(sym.AGREGAR_COMPONENTE);
            } 
            // fall through
          case 111: break;
          case 55: 
            { return symbol(sym.FECHA_MODIFICACION);
            } 
            // fall through
          case 112: break;
          case 56: 
            { return symbol(sym.MODIFICAR_COMPONENTE);
            } 
            // fall through
          case 113: break;
          case 57: 
            { return symbol(sym.USUARIO_MODIFICACION);
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico1 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico1 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico1(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
